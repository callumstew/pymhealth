.. highlight:: python3
========
Location
========

--------
Distance
--------
Distance formula between latitude and longitude points given in decimal degrees. Additionally, vectorised JIT compiled functions are provided: 

* elementwise: elementwise distance between latitude and longitude vectors
* vector: distance between a single fixed location and vectors for compared latitudes and longitudes
* outer_product: The distance outer product between two sets of latitude/longitude vectors

Metrics:

* `Haversine`_
* None


Haversine
---------
Haversine gives the great-circle distance between two points on a sphere.

:math:`d = 2r \cdot \arcsin (\sqrt{\sin^2(\frac{\phi_2 - \phi_1}{2}) + \cos(\phi_1) \cdot \cos(\phi_2) \cdot \sin^2(\frac{\lambda_2 - \lambda_1}{2})})`

The radius of the earth varies, so the mean radius is used (6371km). The
calculated distance should be accurate within ~0.5%

.. py:function:: haversine(lat1, lon1, lat2, lon2)
    Find the haversine distance in kilometers between the points
    (lat1, lon1) and (lat2, lon2) given in degrees.

    :param lat1: latitude of first point
    :type lat1: float
    :param lon1: longitude of first point
    :type lon1: float
    :param lat2: latitude of second point
    :type lat2: float
    :param lon2: longitude of second point
    :type lon2: float
    :rtype: float64

Example:
::
    >>> from mhealth.processing.location.distance import haversine
    >>> haversine(41.507483, -99.436554, 38.504048, -98.315949)
    347.32834803942626
    >>> london = (51.5074, 0.1278)
    >>> paris = (48.8566, 2.3522)
    >>> haversine(*london, *paris)
    334.57613798049994



